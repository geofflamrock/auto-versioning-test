name: Release

on:
  push:
    branches: ["main"]

  pull_request:
    branches: ["main"]

jobs:
  get_version:
    name: Get versioning information
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      create_release: ${{ steps.set_create_release.outputs.create_release }}
      has_unreleased_changes: ${{ steps.set_has_unreleased_changes.outputs.has_unreleased_changes }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get all tags

      - name: Download auto
        run: |
          curl -kL -o - https://github.com/intuit/auto/releases/download/v11.3.0/auto-linux.gz | gunzip > ${{ runner.temp }}/auto
          chmod +x ${{ runner.temp }}/auto

      - name: Test latest
        run: ${{ runner.temp }}/auto latest --dry-run --no-version-prefix --name github-actions[bot] --email github-actions[bot]@users.noreply.github.com

      - name: Get next release version
        id: get_next_release_version
        run: echo "version=$(${{ runner.temp }}/auto latest --dry-run --quiet --no-version-prefix --name github-actions[bot] --email github-actions[bot]@users.noreply.github.com)" >> $GITHUB_OUTPUT

      - name: Print next release version
        run: echo "${{ steps.get_next_release_version.outputs.version }}"

      - name: Get next release semver bump type
        id: get_next_release_semver_bump_type
        run: echo "bump_type=$(${{ runner.temp }}/auto version --only-publish-with-release-label)" >> $GITHUB_OUTPUT

      - name: Print next release semver bump type
        run: echo "${{ steps.get_next_release_semver_bump_type.outputs.bump_type }}"

      - name: Get branch names
        id: branch_names
        uses: OctopusDeploy/util-actions/current-branch-name@current-branch-name.0.1.0

      - name: Get pre-release version when no version
        id: get_pre_release_version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          version_format: "${major}.${minor}.${patch}-${{ steps.branch_names.outputs.branch_name }}.${{ github.run_number }}-${{ github.run_attempt }}"

      - name: Get pre-release version when version
        id: get_specific_pre_release_version
        run: echo "version=${{ steps.get_next_release_version.outputs.version }}-${{ steps.branch_names.outputs.branch_name }}.${{ github.run_number }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT

      - name: Set whether to perform a release
        id: set_create_release
        run: echo "create_release=${{ steps.get_next_release_semver_bump_type.outputs.bump_type != '' }}" >> $GITHUB_OUTPUT

      - name: Set whether there are unreleased changes
        id: set_has_unreleased_changes
        run: echo "has_unreleased_changes=${{ steps.get_next_release_semver_bump_type.outputs.bump_type == '' && steps.get_next_release_version.outputs.version != '' }}" >> $GITHUB_OUTPUT

      - name: Get version
        id: get_version
        run: echo "version=${{ steps.set_create_release.outputs.create_release == 'true' && steps.get_next_release_version.outputs.version || steps.get_specific_pre_release_version.outputs.version || steps.get_pre_release_version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Print version
        run: echo "Version ${{ steps.get_version.outputs.version }}"

  release:
    name: Release
    needs: [get_version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.ref == 'refs/heads/main' && needs.get_version.outputs.create_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get all tags

      - name: Download auto
        run: |
          curl -kL -o - https://github.com/intuit/auto/releases/download/v11.3.0/auto-linux.gz | gunzip > ${{ runner.temp }}/auto
          chmod +x ${{ runner.temp }}/auto

      - name: Release
        run: ${{ runner.temp }}/auto shipit --only-publish-with-release-label --no-changelog --name github-actions[bot] --email github-actions[bot]@users.noreply.github.com

  versioning_pr:
    name: Create versioning pull request
    needs: [get_version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    if: github.ref == 'refs/heads/main' && needs.get_version.outputs.has_unreleased_changes == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get all tags

      - name: Download auto
        run: |
          curl -kL -o - https://github.com/intuit/auto/releases/download/v11.3.0/auto-linux.gz | gunzip > ${{ runner.temp }}/auto
          chmod +x ${{ runner.temp }}/auto

      - name: Update changelog test
        run: ${{ runner.temp }}/auto changelog --no-git-commit --name github-actions[bot] --email github-actions[bot]@users.noreply.github.com

      - name: Update changelog
        id: update_changelog
        run: |
          echo "changes<<EOF" >> $GITHUB_ENV
          echo "$(${{ runner.temp }}/auto changelog --quiet --no-git-commit --name github-actions[bot] --email github-actions[bot]@users.noreply.github.com)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create versioning pull request
        uses: peter-evans/create-pull-request@v7
        with:
          branch: auto/release
          title: Release version `${{ needs.get_version.outputs.version }}`
          commit-message: Release version `${{ needs.get_version.outputs.version }}`
          labels: release
          body: |
            This PR will release version `${{ needs.get_version.outputs.version }}`

            ## Changes

            ${{ env.changes }}

            ## Releasing a new version

            To release the version when you are ready, merge this PR. The new version will then be built and published to a GitHub release.

            If you don't see your changes in the list above, please check your PR is tagged with an appropriate label to include your change in the release notes.
